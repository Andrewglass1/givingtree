leaf_path = "<%= asset_path('leaf.svg') %>"
seed_path = "<%= asset_path('seed.svg') %>"
p = (x) -> console.log(x)
pt = -> console.log(this)

# Generates an entire tree
genData = (maxDepth) ->
  maxSiblings = 4

  genDataRec = (currDepth) ->
    siblings = Math.random() * maxSiblings

    'depth': currDepth
    'text': "depth = #{currDepth}"
    'children': if currDepth <= maxDepth
      for i in [0..siblings]
        genDataRec(currDepth+1)

  genDataRec(1)

# A tree iterator
createIterator = ->
  id = 0
  root = { 'children': [], 'id': id }
  nodes = [ ]
  iterator = ->
    if nodes.length is 0
      nodes.push(root)
    else
      id += 1
      idx = Math.floor(Math.random() * nodes.length)
      parent = nodes[idx]
      node = { 'children': [], 'id': id }
      parent.children.push(node)
      nodes.push(node)
    root
  iterator


# internal/external nodes
partitionNodes = (graph) ->
  external = []
  internal = []
  traverse = (graph) ->
    if graph.children?.length > 0
      internal.push(graph)
      for child in graph.children
        traverse(child)
    else
      external.push(graph)
  traverse(graph)

  'internal': internal
  'external': external
  'all':      internal.concat(external)

propertiesOf = (obj) ->
  prop for prop of obj when obj.hasOwnProperty(prop)

# The format that comes from the server isn't ideal.
# This fixes it up.
normalizeData = (data) ->
  normalizeChildren = (obj, depth) ->
    for id in propertiesOf obj
      {
        'id': id
        'children': normalizeChildren obj[id]['children'], depth+1
        'depth': depth
      }

  # The root will be the only object in the array:
  normalizeChildren(data, 0)[0]

# Applies a function to each node
eachNode = (tree, fn) ->
  traverse = (tree) ->
    for node in tree.children
      fn node
      traverse node
    null

  fn tree
  traverse tree

padding = 50
w = 960
rx = ry = w/2
limbLen = w/2 - padding
spreadDegrees = (2/3) * 360
#duration = 2000
duration = 250

vis = d3.select("#tree")
  .append("svg:svg")
    .style("width", w + "px")
    .style("height", w + "px")
  .append("svg:g")
    .attr("transform", "translate(#{rx},#{ry})")

vis.append("svg:path")
  .attr("class", "trunk")
  .attr("d", "M0,0L0,#{w/2}")

vis.append("svg:image")
  .attr("xlink:href", seed_path)
  .attr("x", -50)
  .attr("y", w/2 - 100)
  .attr("width", 100)
  .attr("height", 100)

redraw = (data, isInitialRender)->
  cluster = d3.layout.cluster()
    .size([spreadDegrees, limbLen])
    .sort(null)
    .separation((a, b) -> (if a.parent == b.parent then 1 else 2) / a.depth)

  line = d3.svg.line.radial()
    .radius((d) -> d.y)
    .angle((d) -> (d.x - spreadDegrees/2) / 180 * Math.PI)

  nodes     = cluster.nodes(data)
  nodeList  = partitionNodes(data).all

  # The first node.x is NaN, for some unkown reason...
  if nodeList.length is 1
    nodeList[0].x = spreadDegrees/2

  # LINES

  lines = vis.selectAll("path.limb")
    .data(cluster.links(nodes), (d) -> "#{d.source.id}_#{d.target.id}")

  lines
    .transition()
    .duration(duration)
    .attr("d", (d) -> line([d.source, d.target]))

  lines.enter()
    .insert("svg:path", ":first-child")
      .attr("class", "limb")
      .attr("d", (d) -> line([d.source, d.source]))
      .transition()
      .duration(duration)
      .delay((d) -> if isInitialRender then d.source.depth * duration else duration)
      .attr("d", (d) -> line([d.source, d.target]))

  # NODES

  node = vis.selectAll(".node")
    .data(nodeList, (d) -> d.id)

  node.exit().remove()

  node
    .attr("class", (d) -> if d.children?.length > 0 then "node internal" else "node external")
    .transition()
    .duration(duration)
    .attr("transform", (d) -> "rotate(#{d.x - spreadDegrees/2})translate(0,#{-d.y - 50})")

  node.enter()
    .append("svg:g")
    .attr("class", (d) -> if d.children?.length > 0 then "node internal" else "node external")
    .attr("transform", (d) -> "rotate(#{d.x - spreadDegrees/2})translate(0,#{-d.y - 50})")
    .append("svg:image")
      .transition()
      .delay((d) -> if isInitialRender then d.depth * duration else duration * 2)
      .attr("class", "leaf")
      .attr("xlink:href", leaf_path)
      .attr("width", "50")
      .attr("height", "50")
      .attr("x", "-25")

startDemo = ->
  iterate = createIterator()
  redraw(iterate())

  redrawCount = 0
  intervalId =
    setInterval (->
      if redrawCount < 100
        redraw(iterate())
      else
        clearInterval(intervalId)
      redrawCount += 1
    ), duration

startRendering = (url) ->
  # Initial render
  d3.json url, (data) ->
    redraw(normalizeData(data), true)

  # Render loop
  renderLoop = ->
    d3.json url, (data) ->
      redraw(normalizeData(data), false)

  setInterval(renderLoop, 2000)

# EXPORTS
@givingTree =
  'startRendering': startRendering
  'startDemo': startDemo

<%#redraw({'id':0, 'children': [{'id':1, 'children':[], 'depth':1},{'id':2, 'children':[], 'depth':1}], 'depth':0})%>
<%#redraw({'id':0, 'children': [], 'depth':0})%>
<%#startDemo()%>
<%#startRendering "http://localhost:3001/api/v1/trees/faa03fc52b7993bf729113868ea8b589.json"%>
